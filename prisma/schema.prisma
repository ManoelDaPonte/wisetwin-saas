// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String
  image         String?
  azureContainerId String? @unique
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  emailVerified DateTime?
  organizations Organization[]
  OrganizationMember OrganizationMember[]
  sentInvitations OrganizationInvitation[] @relation("InvitedBy")
}

model Organization {
  id              String    @id @default(cuid())
  name            String
  description     String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  azureContainerId String   @unique
  owner           User      @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId         String
  members         OrganizationMember[]
  invitations     OrganizationInvitation[]
}

model OrganizationMember {
  id             String       @id @default(cuid())
  role           Role         @default(MEMBER)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@unique([userId, organizationId])
}

model OrganizationInvitation {
  id              String       @id @default(cuid())
  email           String
  role            Role         @default(MEMBER)
  token           String       @unique @default(cuid())
  code            String       @unique // Code court pour saisie manuelle (8 caractères)
  
  organizationId  String
  organization    Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  invitedById     String
  invitedBy       User         @relation("InvitedBy", fields: [invitedById], references: [id])
  
  status          InvitationStatus @default(PENDING)
  expiresAt       DateTime     // 7 jours par défaut
  acceptedAt      DateTime?
  
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  
  @@unique([email, organizationId]) // Une seule invitation active par email/org
  @@index([token])
  @@index([code])
  @@index([email])
}

enum Role {
  ADMIN
  MEMBER
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  EXPIRED
  CANCELLED
}
